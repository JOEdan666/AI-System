
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.LearningItemScalarFieldEnum = {
  id: 'id',
  text: 'text',
  subject: 'subject',
  createdAt: 'createdAt'
};

exports.Prisma.KnowledgeBaseItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  size: 'size',
  lastModified: 'lastModified',
  text: 'text',
  ocrText: 'ocrText',
  notes: 'notes',
  dataUrl: 'dataUrl',
  include: 'include',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningSessionScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  subject: 'subject',
  topic: 'topic',
  aiExplanation: 'aiExplanation',
  socraticDialogue: 'socraticDialogue',
  currentStep: 'currentStep',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  coachingHistory: 'coachingHistory',
  feedback: 'feedback',
  finalScore: 'finalScore',
  grade: 'grade',
  region: 'region',
  reviewNotes: 'reviewNotes',
  aiSummary: 'aiSummary'
};

exports.Prisma.QuizQuestionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  question: 'question',
  type: 'type',
  options: 'options',
  correctAnswer: 'correctAnswer',
  explanation: 'explanation',
  difficulty: 'difficulty',
  points: 'points',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.UserAnswerScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  questionId: 'questionId',
  userAnswer: 'userAnswer',
  isCorrect: 'isCorrect',
  score: 'score',
  timeSpent: 'timeSpent',
  answeredAt: 'answeredAt'
};

exports.Prisma.LearningStatsScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  totalQuestions: 'totalQuestions',
  correctAnswers: 'correctAnswers',
  totalScore: 'totalScore',
  maxScore: 'maxScore',
  accuracy: 'accuracy',
  totalTimeSpent: 'totalTimeSpent',
  explanationTime: 'explanationTime',
  coachingTime: 'coachingTime',
  quizTime: 'quizTime',
  weaknesses: 'weaknesses',
  suggestions: 'suggestions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  LearningItem: 'LearningItem',
  KnowledgeBaseItem: 'KnowledgeBaseItem',
  LearningSession: 'LearningSession',
  QuizQuestion: 'QuizQuestion',
  UserAnswer: 'UserAnswer',
  LearningStats: 'LearningStats'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/fangyuan/Desktop/产品First/app/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/fangyuan/Desktop/产品First/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../app/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel LearningItem {\n  id        String   @id @default(cuid())\n  text      String\n  subject   String\n  createdAt DateTime @default(now())\n}\n\nmodel KnowledgeBaseItem {\n  id           String   @id @default(cuid())\n  name         String\n  type         String\n  size         Int\n  lastModified BigInt\n  text         String?\n  ocrText      String?\n  notes        String?\n  dataUrl      String?\n  include      Boolean  @default(true)\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  @@map(\"knowledge_base_items\")\n}\n\nmodel LearningSession {\n  id               String         @id @default(cuid())\n  conversationId   String         @unique\n  subject          String\n  topic            String\n  aiExplanation    String?\n  socraticDialogue Json?\n  currentStep      String         @default(\"EXPLAIN\")\n  isCompleted      Boolean        @default(false)\n  createdAt        DateTime       @default(now())\n  updatedAt        DateTime       @updatedAt\n  coachingHistory  Json?\n  feedback         String?\n  finalScore       Int?\n  grade            String?\n  region           String?\n  reviewNotes      String?\n  aiSummary        String?\n  quizQuestions    QuizQuestion[]\n  userAnswers      UserAnswer[]\n\n  @@map(\"learning_sessions\")\n}\n\nmodel QuizQuestion {\n  id            String          @id @default(cuid())\n  sessionId     String\n  question      String\n  type          String\n  options       Json?\n  correctAnswer String\n  explanation   String?\n  difficulty    String          @default(\"medium\")\n  points        Int             @default(1)\n  order         Int\n  createdAt     DateTime        @default(now())\n  session       LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n  userAnswers   UserAnswer[]\n\n  @@map(\"quiz_questions\")\n}\n\nmodel UserAnswer {\n  id         String          @id @default(cuid())\n  sessionId  String\n  questionId String\n  userAnswer String\n  isCorrect  Boolean\n  score      Int             @default(0)\n  timeSpent  Int?\n  answeredAt DateTime        @default(now())\n  question   QuizQuestion    @relation(fields: [questionId], references: [id], onDelete: Cascade)\n  session    LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  @@map(\"user_answers\")\n}\n\nmodel LearningStats {\n  id              String   @id @default(cuid())\n  conversationId  String   @unique\n  totalQuestions  Int      @default(0)\n  correctAnswers  Int      @default(0)\n  totalScore      Int      @default(0)\n  maxScore        Int      @default(0)\n  accuracy        Float    @default(0)\n  totalTimeSpent  Int      @default(0)\n  explanationTime Int      @default(0)\n  coachingTime    Int      @default(0)\n  quizTime        Int      @default(0)\n  weaknesses      Json?\n  suggestions     Json?\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  @@map(\"learning_stats\")\n}\n",
  "inlineSchemaHash": "d169d4099520b0e23a6a65b6a114082c0dd820a7cff054d9b7d1b1d87e7d86f6",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"LearningItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"KnowledgeBaseItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastModified\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ocrText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dataUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"include\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"knowledge_base_items\"},\"LearningSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"aiExplanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"socraticDialogue\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"currentStep\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"coachingHistory\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"feedback\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"finalScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reviewNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"aiSummary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quizQuestions\",\"kind\":\"object\",\"type\":\"QuizQuestion\",\"relationName\":\"LearningSessionToQuizQuestion\"},{\"name\":\"userAnswers\",\"kind\":\"object\",\"type\":\"UserAnswer\",\"relationName\":\"LearningSessionToUserAnswer\"}],\"dbName\":\"learning_sessions\"},\"QuizQuestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"correctAnswer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"LearningSession\",\"relationName\":\"LearningSessionToQuizQuestion\"},{\"name\":\"userAnswers\",\"kind\":\"object\",\"type\":\"UserAnswer\",\"relationName\":\"QuizQuestionToUserAnswer\"}],\"dbName\":\"quiz_questions\"},\"UserAnswer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAnswer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isCorrect\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"answeredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"QuizQuestion\",\"relationName\":\"QuizQuestionToUserAnswer\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"LearningSession\",\"relationName\":\"LearningSessionToUserAnswer\"}],\"dbName\":\"user_answers\"},\"LearningStats\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalQuestions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"correctAnswers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"accuracy\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalTimeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"explanationTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"coachingTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quizTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"weaknesses\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"suggestions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"learning_stats\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

